\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{elpi}[2023/11/17 Extended LaTeX Paramter Interface Package]

\RequirePackage{ifthen}
\RequirePackage{luapackageloader}
\RequirePackage{textcomp}
\RequirePackage{xspace}

\newcommand\curnamespace{\jobname}
\newcommand\paramplaceholder[1]{\texttt{\textbf{[}#1\textbf{]}}}
\newcommand\paramnotfound[1]{\paramplaceholder{{\textnormal{\textlangle unknown\textrangle}} #1}}
\newcommand\paramlistconjunction{,~}

\directlua{elpi = require('elpi')}

\newcommand\setnamespace[1]{\renewcommand\curnamespace{#1}}
\newcommand\strictparams{\directlua{elpi.set_strict()}}
\newcommand%! suppress = NonMatchingIf
\ifparam[4][\curnamespace]{%
    \directlua{local p = elpi.param_object('#2','#1') if p then p:set_bool('#2') end}%
    \ifthenelse{\boolean{#2}}{#3}{#4}}
\newcommand\param[2][\curnamespace]{\directlua{elpi.param('#2', '#1')}}
\newcommand\PARAM[2][\curnamespace]{\directlua{local p = elpi.param_object('#2', '#1') if p then tex.print(p:to_upper()) end}}
\def\rawparam#1#2{\directlua{local p = elpi.param_object('#2', '#1') if p then tex.print(p:val() or p.default or p.placeholder) end}}
\newcommand\hasparam[4][\curnamespace]{%
    \def\has@param@true{#3}%
    \def\has@param@false{#4}%
    \directlua{elpi.handle_param_is_set('#2', '#1')}}
\newcommand\paramfield[3][\curnamespace]{\directlua{elpi.field('#2','#3', '#1')}}
\newenvironment{paramobject}[2][\curnamespace]{\directlua{elpi.with_object('#2', '#1')}}{}
\newcommand\forlistitem[3][\curnamespace]{\directlua{elpi.for_item('#2', '#1', '#3')}}
\newcommand\fortablerow[3][\curnamespace]{\directlua{elpi.with_rows('#2', '#1', '#3')}}
\newcommand\loadrecipe[2][]{\directlua{elpi.recipe('#2', '#1')}}
\newcommand\loadpayload[2][]{\directlua{elpi.payload('#2', '#1')}}
